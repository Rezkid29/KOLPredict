It looks like you're encountering two key issues here:

Unauthorized Access (401): This indicates that your API request to fetch notifications is failing due to authentication issues. Make sure that your user is authenticated before trying to access routes that require authentication.

Not Found Error (404): This indicates that the profile request for a user is not finding a valid endpoint or resource. Ensure that the user ID you're using is correct, and verify that your server has the corresponding route defined to handle the profile request.

To address these issues, you might want to implement checks for authentication before making requests for notifications and profile data.

Modifications to queryClient.ts
Here's how you can adjust the code to handle these API calls effectively:

import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
// Function to fetch notifications
const fetchNotifications = async () => {
  const response = await apiRequest('/api/notifications');
  if (!response.ok) {
    throw new Error('Failed to fetch notifications');
  }
  return response.json();
};
// Function to fetch profile data
const fetchProfile = async (userId) => {
  const response = await apiRequest(`/api/profile/im?userId=${userId}`);
  if (!response.ok) {
    throw new Error('Failed to fetch profile');
  }
  return response.json();
};
// Usage inside a component
const NotificationsComponent = () => {
  const { data: notifications, error: notificationsError } = useQuery("notifications", fetchNotifications);
  const userId = getUserIdFromSession(); // Make sure this function correctly retrieves userId
  const { data: profile, error: profileError } = useQuery(["profile", userId], () => fetchProfile(userId));
  
  if (notificationsError) return <div>Error loading notifications.</div>;
  if (profileError) return <div>Error loading profile.</div>;
  // Render the notifications and profile data as needed
};
function getUserIdFromSession() {
  // Implement your session logic, ensure this retrieves userId correctly
  // Example:
  return sessionStorage.getItem('userId');
}
Server-side Authentication
Make sure your server is set up to handle authentication correctly, ensuring that sessions are being managed:

Verify that your session middleware is properly configured in server/index.ts:
import express from 'express';
import session from 'express-session';
const app = express();
// Setup for session
app.use(session({
  secret: 'your_secret_key',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false } // Change to true in production with HTTPS
}));
app.set('trust proxy', true); // Ensure to trust proxy if behind one
// Your routes here...
Check your routes in server/routes.ts to ensure that they require authentication correctly using the requireAuth middleware:
import { requireAuth } from './auth-middleware';
app.get("/api/notifications", requireAuth, async (req, res) => {
  const notifications = await getNotificationsForUser(req.session.userId);
  res.json(notifications);
});
app.get("/api/profile/im", requireAuth, async (req, res) => {
  const profile = await getProfileById(req.query.userId);
  res.json(profile);
});
Conclusion
Make sure to test these changes and address the handling of user sessions appropriately. If the problem persists, check your API responses for more details on the specific issues you're encountering.

Doing this should prevent the unauthorized and not found errors from occurring, leading to a better user experience.

This error is persisting.

LO

iliketut
Assistant
just now
The error you're seeing (ReferenceError: AlertDialogTrigger is not defined) suggests that the AlertDialogTrigger component is either not imported properly or not defined in your messages.tsx file.

Hereâ€™s how you can fix the issue:

Check Imports: Ensure that you're importing AlertDialogTrigger at the top of the messages.tsx file. If it is part of a component library (e.g., Radix UI), you need to make sure it is imported correctly.
// Add this at the top of your messages.tsx file if it's from a library
import { AlertDialogTrigger } from '@radix-ui/react-alert-dialog'; // Adjust the import path as necessary
Define AlertDialogTrigger: If it's a custom component, ensure it is properly defined within your project. If you have defined it in another file, make sure to import it correctly.

Ensure the Component Exists: If AlertDialogTrigger does not exist in the expected library, confirm that the library is installed in your project and that you're using the correct version.

After making these checks, your messages.tsx file might look something like this:

import React from 'react';
import { AlertDialog, AlertDialogTrigger } from '@radix-ui/react-alert-dialog'; // Example import
// Other imports...
const Messages = () => {
  // Your component logic...
  return (
    <div>
      {/* Example of using AlertDialogTrigger */}
      <AlertDialog>
        <AlertDialogTrigger>
          <button>Open Alert</button>
        </AlertDialogTrigger>
        {/* Other dialog content... */}
      </AlertDialog>
      {/* Other message rendering logic... */}
    </div>
  );
};
export default Messages;
Double-check your imports, ensure the component is declared, and verify that you're using the correct library versions. This should resolve the AlertDialogTrigger is not defined error.